/*! Bootstrap v5.3.0-core | Custom mini-version */
"use strict";
function _defineProperties(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    (n.enumerable = n.enumerable || !1),
      (n.configurable = !0),
      "value" in n && (n.writable = !0),
      Object.defineProperty(e, n.key, n);
  }
}
function _createClass(e, t, r) {
  return (
    t && _defineProperties(e.prototype, t), r && _defineProperties(e, r), e
  );
}
var Alert = (function () {
    function e(e) {
      this._element = e;
    }
    var t = e.prototype;
    return (
      (t.close = function (e) {
        var t = this._element;
        e && (t = this._getRootElement(e)),
          this._triggerCloseEvent(t).isDefaultPrevented() ||
            this._removeElement(t);
      }),
      (t.dispose = function () {
        this._element = null;
      }),
      (t._triggerCloseEvent = function (e) {
        return EventHandler.trigger(e, "close.bs.alert");
      }),
      (t._removeElement = function (e) {
        e.classList.remove("show"),
          e.classList.contains("fade")
            ? e.addEventListener("transitionend", function () {
                return e.remove();
              })
            : e.remove();
      }),
      (t._getRootElement = function (e) {
        return getElementFromSelector(e) || e.closest(".alert");
      }),
      _createClass(e, null, [
        {
          key: "getInstance",
          value: function (e) {
            return Data.get(e, this);
          },
        },
        {
          key: "getOrCreateInstance",
          value: function (e) {
            return this.getInstance(e) || new this(e);
          },
        },
      ]),
      e
    );
  })(),
  Modal = (function () {
    function e(e, t) {
      (this._config = this._getConfig(t)),
        (this._element = e),
        (this._dialog = SelectorEngine.findOne(".modal-dialog", e)),
        (this._backdrop = this._initializeBackDrop()),
        (this._isShown = !1),
        (this._ignoreBackdropClick = !1);
    }
    var t = e.prototype;
    return (
      (t.toggle = function (e) {
        return this._isShown ? this.hide() : this.show(e);
      }),
      (t.show = function (e) {
        this._isShown || ((this._isShown = !0), this._showElement(e));
      }),
      (t.hide = function () {
        this._isShown && this._hideModal();
      }),
      (t.dispose = function () {
        this._backdrop.dispose(), super.dispose();
      }),
      (t._initializeBackDrop = function () {
        return new Backdrop({
          isVisible: Boolean(this._config.backdrop),
          isAnimated: this._isAnimated(),
        });
      }),
      (t._getConfig = function (e) {
        return (e = { ...Default, e }), config(e);
      }),
      _createClass(e, null, [
        {
          key: "getInstance",
          value: function (e) {
            return Data.get(e, this);
          },
        },
      ]),
      e
    );
  })(),
  Tooltip = (function () {
    function e(e, t) {
      (this._isEnabled = !0),
        (this._timeout = 0),
        (this._hoverState = ""),
        (this._activeTrigger = {}),
        (this._popper = null),
        (this._config = this._getConfig(t)),
        (this.tip = null),
        this._setListeners(),
        (this._element = e);
    }
    var t = e.prototype;
    return (
      (t.enable = function () {
        this._isEnabled = !0;
      }),
      (t.disable = function () {
        this._isEnabled = !1;
      }),
      (t.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }),
      (t.toggle = function (e) {
        this._isEnabled &&
          (e && (this._activeTrigger.click = !this._activeTrigger.click),
          this._isWithActiveTrigger() ? this._enter(null) : this._leave(null));
      }),
      (t.dispose = function () {
        clearTimeout(this._timeout),
          EventHandler.off(this._element, this.constructor.EVENT_KEY),
          this.tip && this.tip.remove(),
          this._popper && this._popper.destroy(),
          super.dispose();
      }),
      (t._getConfig = function (e) {
        return (e = { ...this.constructor.Default, ...e }), config(e);
      }),
      _createClass(e, null, [
        {
          key: "getInstance",
          value: function (e) {
            return Data.get(e, this);
          },
        },
      ]),
      e
    );
  })();
document.querySelectorAll("[data-bs-toggle='tooltip']").forEach(function (e) {
  return new Tooltip(e);
});
